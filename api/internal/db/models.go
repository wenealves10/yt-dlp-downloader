// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type CoreDownloadStatus string

const (
	CoreDownloadStatusPENDING    CoreDownloadStatus = "PENDING"
	CoreDownloadStatusPROCESSING CoreDownloadStatus = "PROCESSING"
	CoreDownloadStatusCOMPLETED  CoreDownloadStatus = "COMPLETED"
	CoreDownloadStatusFAILED     CoreDownloadStatus = "FAILED"
	CoreDownloadStatusCANCELED   CoreDownloadStatus = "CANCELED"
	CoreDownloadStatusEXPIRED    CoreDownloadStatus = "EXPIRED"
	CoreDownloadStatusRETRYING   CoreDownloadStatus = "RETRYING"
)

func (e *CoreDownloadStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CoreDownloadStatus(s)
	case string:
		*e = CoreDownloadStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for CoreDownloadStatus: %T", src)
	}
	return nil
}

type NullCoreDownloadStatus struct {
	CoreDownloadStatus CoreDownloadStatus
	Valid              bool // Valid is true if CoreDownloadStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCoreDownloadStatus) Scan(value interface{}) error {
	if value == nil {
		ns.CoreDownloadStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CoreDownloadStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCoreDownloadStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CoreDownloadStatus), nil
}

type CoreFormatType string

const (
	CoreFormatTypeMP3  CoreFormatType = "MP3"
	CoreFormatTypeM4A  CoreFormatType = "M4A"
	CoreFormatTypeMP4  CoreFormatType = "MP4"
	CoreFormatTypeWEBM CoreFormatType = "WEBM"
	CoreFormatTypeBEST CoreFormatType = "BEST"
	CoreFormatTypeFLAC CoreFormatType = "FLAC"
)

func (e *CoreFormatType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CoreFormatType(s)
	case string:
		*e = CoreFormatType(s)
	default:
		return fmt.Errorf("unsupported scan type for CoreFormatType: %T", src)
	}
	return nil
}

type NullCoreFormatType struct {
	CoreFormatType CoreFormatType
	Valid          bool // Valid is true if CoreFormatType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCoreFormatType) Scan(value interface{}) error {
	if value == nil {
		ns.CoreFormatType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CoreFormatType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCoreFormatType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CoreFormatType), nil
}

type CorePlanType string

const (
	CorePlanTypeFree       CorePlanType = "free"
	CorePlanTypePremium    CorePlanType = "premium"
	CorePlanTypeEnterprise CorePlanType = "enterprise"
)

func (e *CorePlanType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CorePlanType(s)
	case string:
		*e = CorePlanType(s)
	default:
		return fmt.Errorf("unsupported scan type for CorePlanType: %T", src)
	}
	return nil
}

type NullCorePlanType struct {
	CorePlanType CorePlanType
	Valid        bool // Valid is true if CorePlanType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCorePlanType) Scan(value interface{}) error {
	if value == nil {
		ns.CorePlanType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CorePlanType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCorePlanType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CorePlanType), nil
}

type Download struct {
	ID              uuid.UUID
	UserID          uuid.UUID
	OriginalUrl     string
	Format          CoreFormatType
	Status          CoreDownloadStatus
	ThumbnailUrl    pgtype.Text
	FileUrl         pgtype.Text
	ExpiresAt       pgtype.Timestamptz
	DurationSeconds pgtype.Int4
	ErrorMessage    pgtype.Text
	CreatedAt       *time.Time
}

type User struct {
	ID                uuid.UUID
	FullName          string
	Email             string
	HashedPassword    string
	PasswordChangedAt *time.Time
	Active            bool
	Plan              CorePlanType
	DailyLimit        int32
	LastLogin         pgtype.Timestamptz
	IsVerified        bool
	CreatedAt         *time.Time
	UpdatedAt         *time.Time
}
