// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: downloads.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createDownload = `-- name: CreateDownload :one
INSERT INTO downloads (
  id, user_id, original_url, format, status, thumbnail_url, file_url, expires_at, duration_seconds, error_message
)
VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
)
RETURNING id, user_id, original_url, format, status, thumbnail_url, file_url, expires_at, duration_seconds, error_message, created_at
`

type CreateDownloadParams struct {
	ID              uuid.UUID
	UserID          uuid.UUID
	OriginalUrl     string
	Format          CoreFormatType
	Status          CoreDownloadStatus
	ThumbnailUrl    pgtype.Text
	FileUrl         pgtype.Text
	ExpiresAt       pgtype.Timestamptz
	DurationSeconds pgtype.Int4
	ErrorMessage    pgtype.Text
}

func (q *Queries) CreateDownload(ctx context.Context, arg CreateDownloadParams) (Download, error) {
	row := q.db.QueryRow(ctx, createDownload,
		arg.ID,
		arg.UserID,
		arg.OriginalUrl,
		arg.Format,
		arg.Status,
		arg.ThumbnailUrl,
		arg.FileUrl,
		arg.ExpiresAt,
		arg.DurationSeconds,
		arg.ErrorMessage,
	)
	var i Download
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OriginalUrl,
		&i.Format,
		&i.Status,
		&i.ThumbnailUrl,
		&i.FileUrl,
		&i.ExpiresAt,
		&i.DurationSeconds,
		&i.ErrorMessage,
		&i.CreatedAt,
	)
	return i, err
}

const getDownloadByID = `-- name: GetDownloadByID :one
SELECT id, user_id, original_url, format, status, thumbnail_url, file_url, expires_at, duration_seconds, error_message, created_at FROM downloads
WHERE id = $1
`

func (q *Queries) GetDownloadByID(ctx context.Context, id uuid.UUID) (Download, error) {
	row := q.db.QueryRow(ctx, getDownloadByID, id)
	var i Download
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OriginalUrl,
		&i.Format,
		&i.Status,
		&i.ThumbnailUrl,
		&i.FileUrl,
		&i.ExpiresAt,
		&i.DurationSeconds,
		&i.ErrorMessage,
		&i.CreatedAt,
	)
	return i, err
}

const getDownloadsByUser = `-- name: GetDownloadsByUser :many
SELECT id, user_id, original_url, format, status, thumbnail_url, file_url, expires_at, duration_seconds, error_message, created_at FROM downloads
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetDownloadsByUserParams struct {
	UserID uuid.UUID
	Limit  int32
	Offset int32
}

func (q *Queries) GetDownloadsByUser(ctx context.Context, arg GetDownloadsByUserParams) ([]Download, error) {
	rows, err := q.db.Query(ctx, getDownloadsByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Download
	for rows.Next() {
		var i Download
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OriginalUrl,
			&i.Format,
			&i.Status,
			&i.ThumbnailUrl,
			&i.FileUrl,
			&i.ExpiresAt,
			&i.DurationSeconds,
			&i.ErrorMessage,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDownloadStatus = `-- name: UpdateDownloadStatus :exec
UPDATE downloads
SET status = $2, error_message = $3
WHERE id = $1
`

type UpdateDownloadStatusParams struct {
	ID           uuid.UUID
	Status       CoreDownloadStatus
	ErrorMessage pgtype.Text
}

func (q *Queries) UpdateDownloadStatus(ctx context.Context, arg UpdateDownloadStatusParams) error {
	_, err := q.db.Exec(ctx, updateDownloadStatus, arg.ID, arg.Status, arg.ErrorMessage)
	return err
}
