// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  id, full_name, email, hashed_password, plan, daily_limit, active, is_verified, password_changed_at
)
VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9
)
RETURNING id, full_name, email, hashed_password, password_changed_at, active, plan, daily_limit, last_login, is_verified, created_at, updated_at
`

type CreateUserParams struct {
	ID                uuid.UUID
	FullName          string
	Email             string
	HashedPassword    string
	Plan              CorePlanType
	DailyLimit        int32
	Active            bool
	IsVerified        bool
	PasswordChangedAt *time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.FullName,
		arg.Email,
		arg.HashedPassword,
		arg.Plan,
		arg.DailyLimit,
		arg.Active,
		arg.IsVerified,
		arg.PasswordChangedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.Active,
		&i.Plan,
		&i.DailyLimit,
		&i.LastLogin,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, full_name, email, hashed_password, password_changed_at, active, plan, daily_limit, last_login, is_verified, created_at, updated_at FROM users WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.Active,
		&i.Plan,
		&i.DailyLimit,
		&i.LastLogin,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, full_name, email, hashed_password, password_changed_at, active, plan, daily_limit, last_login, is_verified, created_at, updated_at FROM users WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.Active,
		&i.Plan,
		&i.DailyLimit,
		&i.LastLogin,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, full_name, email, hashed_password, password_changed_at, active, plan, daily_limit, last_login, is_verified, created_at, updated_at FROM users
ORDER BY created_at DESC
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Email,
			&i.HashedPassword,
			&i.PasswordChangedAt,
			&i.Active,
			&i.Plan,
			&i.DailyLimit,
			&i.LastLogin,
			&i.IsVerified,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserLoginInfo = `-- name: UpdateUserLoginInfo :exec
UPDATE users
SET last_login = now(), updated_at = now()
WHERE id = $1
`

func (q *Queries) UpdateUserLoginInfo(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, updateUserLoginInfo, id)
	return err
}
